public Boolean sameElements(List<Integer> nums1, List<Integer> nums2) {
    if (nums1.size() != nums2.size()) {
            return false;
        }
        
        // Create maps to store the frequency of each element in both lists
        Map<Integer, Integer> map1 = new Map<Integer, Integer>();
        Map<Integer, Integer> map2 = new Map<Integer, Integer>();
        
        // Count the frequency of each element in nums1
        for (Integer num : nums1) {
            if (map1.containsKey(num)) {
                map1.put(num, map1.get(num) + 1);
            } else {
                map1.put(num, 1);
            }
        }
        
        // Count the frequency of each element in nums2
        for (Integer num : nums2) {
            if (map2.containsKey(num)) {
                map2.put(num, map2.get(num) + 1);
            } else {
                map2.put(num, 1);
            }
        }
        
        // Compare both maps for equality
        return map1.equals(map2);
    }

    // Test method to verify the sameElements function
    public static void testSameElements() {
        // Test case 1: Lists with the same elements (including duplicates)
        List<Integer> nums1 = new List<Integer>{5, 7};
        List<Integer> nums2 = new List<Integer>{7, 5, 5};
        System.debug('Test case 1: ' + sameElements(nums1, nums2)); // Expected output: true
        
        // Test case 2: Lists with different elements
        List<Integer> nums3 = new List<Integer>{5, 7};
        List<Integer> nums4 = new List<Integer>{7, 5, 9};
        System.debug('Test case 2: ' + sameElements(nums3, nums4)); // Expected output: false
    
}